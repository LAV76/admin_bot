import asyncio
import logging
import os
import json
from datetime import datetime, time
from typing import List, Dict, Optional, Any
import asyncpg
from aiogram import Bot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DB_USER = os.getenv("DB_USER", "postgres")
DB_PASS = os.getenv("DB_PASS", "")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME", "tgbot_admin")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATIONS_CONFIG_FILE = "config/notifications.json"

# –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_TYPES = {
    "role_changes": "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π",
    "new_users": "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "system_events": "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
    "errors": "–û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
}

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
class NotificationManager:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(NotificationManager, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        if not self._initialized:
            self.config = {
                "enabled": False,
                "schedule": {
                    "daily_time": "10:00",
                    "weekly_day": 1,  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                    "use_daily": True
                },
                "types": {
                    "role_changes": True,
                    "new_users": True,
                    "system_events": True,
                    "errors": True
                },
                "recipients": []  # –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            }
            self._load_config()
            self._initialized = True
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(NOTIFICATIONS_CONFIG_FILE):
                with open(NOTIFICATIONS_CONFIG_FILE, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    self.config.update(loaded_config)
                    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                self._save_config()
                logger.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(NOTIFICATIONS_CONFIG_FILE), exist_ok=True)
            with open(NOTIFICATIONS_CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4, ensure_ascii=False)
                logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def enable_notifications(self, enabled: bool = True) -> bool:
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            self.config["enabled"] = enabled
            self._save_config()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {'–≤–∫–ª—é—á–µ–Ω–∏–∏' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def set_notification_type(self, notification_type: str, enabled: bool) -> bool:
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if notification_type in self.config["types"]:
                self.config["types"][notification_type] = enabled
                self._save_config()
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def set_schedule(self, daily_time: str, weekly_day: int, use_daily: bool) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            self.config["schedule"]["daily_time"] = daily_time
            self.config["schedule"]["weekly_day"] = weekly_day
            self.config["schedule"]["use_daily"] = use_daily
            self._save_config()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def add_recipient(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if user_id not in self.config["recipients"]:
                self.config["recipients"].append(user_id)
                self._save_config()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def remove_recipient(self, user_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if user_id in self.config["recipients"]:
                self.config["recipients"].remove(user_id)
                self._save_config()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def get_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.config.copy()
    
    async def send_notification(self, bot: Bot, message: str, notification_type: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º"""
        try:
            if not self.config["enabled"]:
                logger.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return False
            
            if notification_type and not self.config["types"].get(notification_type, False):
                logger.debug(f"–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π '{notification_type}' –æ—Ç–∫–ª—é—á–µ–Ω")
                return False
            
            for user_id in self.config["recipients"]:
                try:
                    await bot.send_message(user_id, message, parse_mode="HTML")
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    async def schedule_notifications(self, bot: Bot):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                now = datetime.now()
                current_day = now.weekday()  # 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                current_time_str = now.strftime("%H:%M")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                if self.config["enabled"]:
                    schedule = self.config["schedule"]
                    
                    if schedule["use_daily"] and current_time_str == schedule["daily_time"]:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        await self._send_daily_summary(bot)
                    
                    if not schedule["use_daily"] and current_day == schedule["weekly_day"] and current_time_str == schedule["daily_time"]:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        await self._send_weekly_summary(bot)
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (1 –º–∏–Ω—É—Ç–∞)
                await asyncio.sleep(60)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)
    
    async def _send_daily_summary(self, bot: Bot):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = await asyncpg.connect(
                host=DB_HOST,
                port=DB_PORT,
                user=DB_USER,
                password=DB_PASS,
                database=DB_NAME
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–æ–π
            message = "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä–æ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            if self.config["types"]["role_changes"]:
                role_changes = await conn.fetch(
                    """
                    SELECT COUNT(*) as count, action
                    FROM role_audit
                    WHERE performed_at >= NOW() - INTERVAL '24 hours'
                    GROUP BY action
                    """
                )
                
                message += "<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –∑–∞ 24 —á–∞—Å–∞:</b>\n"
                if role_changes:
                    for record in role_changes:
                        action = "–¥–æ–±–∞–≤–ª–µ–Ω—ã" if record["action"] == "add" else "—É–¥–∞–ª–µ–Ω—ã"
                        message += f"‚Ä¢ {record['count']} —Ä–æ–ª–µ–π {action}\n"
                else:
                    message += "‚Ä¢ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
                
                message += "\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            if self.config["types"]["new_users"]:
                new_users = await conn.fetchval(
                    """
                    SELECT COUNT(*) 
                    FROM users
                    WHERE created_at >= NOW() - INTERVAL '24 hours'
                    """
                )
                
                message += f"<b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞:</b> {new_users}\n\n"
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await conn.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            for user_id in self.config["recipients"]:
                try:
                    await bot.send_message(user_id, message, parse_mode="HTML")
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
    
    async def _send_weekly_summary(self, bot: Bot):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = await asyncpg.connect(
                host=DB_HOST,
                port=DB_PORT,
                user=DB_USER,
                password=DB_PASS,
                database=DB_NAME
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–æ–π
            message = "üìà <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä–æ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            if self.config["types"]["role_changes"]:
                role_changes = await conn.fetch(
                    """
                    SELECT COUNT(*) as count, action
                    FROM role_audit
                    WHERE performed_at >= NOW() - INTERVAL '7 days'
                    GROUP BY action
                    """
                )
                
                message += "<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
                if role_changes:
                    for record in role_changes:
                        action = "–¥–æ–±–∞–≤–ª–µ–Ω—ã" if record["action"] == "add" else "—É–¥–∞–ª–µ–Ω—ã"
                        message += f"‚Ä¢ {record['count']} —Ä–æ–ª–µ–π {action}\n"
                else:
                    message += "‚Ä¢ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
                
                message += "\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            if self.config["types"]["new_users"]:
                new_users = await conn.fetchval(
                    """
                    SELECT COUNT(*) 
                    FROM users
                    WHERE created_at >= NOW() - INTERVAL '7 days'
                    """
                )
                
                message += f"<b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {new_users}\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            total_users = await conn.fetchval("SELECT COUNT(*) FROM users")
            total_roles = await conn.fetchval("SELECT COUNT(*) FROM user_roles")
            
            message += f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π: {total_roles}\n"
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await conn.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            for user_id in self.config["recipients"]:
                try:
                    await bot.send_message(user_id, message, parse_mode="HTML")
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = NotificationManager()

# –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–≤–Ω–µ
def enable_notifications(enabled: bool = True) -> bool:
    """–í–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager.enable_notifications(enabled)

def set_notification_type(notification_type: str, enabled: bool) -> bool:
    """–í–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager.set_notification_type(notification_type, enabled)

def set_schedule(daily_time: str, weekly_day: int, use_daily: bool) -> bool:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager.set_schedule(daily_time, weekly_day, use_daily)

def add_recipient(user_id: int) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager.add_recipient(user_id)

def remove_recipient(user_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager.remove_recipient(user_id)

def get_notification_config() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager.get_config()

async def send_notification(bot: Bot, message: str, notification_type: str = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º"""
    return await notification_manager.send_notification(bot, message, notification_type)

async def start_notification_scheduler(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await notification_manager.schedule_notifications(bot) 