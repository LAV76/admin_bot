import os
import logging
from typing import Optional
import aiohttp
import asyncio
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("ai_service")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)

class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª—é—á–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.api_key = os.getenv("API_KEY")
        self.base_url = "https://api.sree.shop/v1/chat/completions"
        self.model = "gpt-4o"  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
        if not self.api_key:
            logger.warning("API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    async def generate_text(self, prompt: str, model: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é AI –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è AI
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è self.model)
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥—Ä—É–≥–∞—è
            model_to_use = model or self.model
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            payload = {
                "model": model_to_use,
                "messages": [{"role": "user", "content": prompt}]
            }
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å –ø—Ä–æ–º—Ç–æ–º –¥–ª–∏–Ω–æ–π {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.base_url,
                    headers=headers,
                    json=payload,
                    timeout=120  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–æ–ª–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        generated_text = result.get("choices", [{}])[0].get("message", {}).get("content", "")
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª–∏–Ω–æ–π {len(generated_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return generated_text
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}, –æ—Ç–≤–µ—Ç: {error_text}")
                        return f"–û—à–∏–±–∫–∞ API: {response.status}"
            
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
        except asyncio.TimeoutError:
            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API", exc_info=True)
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞", exc_info=True)
            return "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"
    
    async def generate_post_content(self, user_input: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        """
        prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–µ –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è "
            "Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–µ –±–æ–ª–µ–µ 1000 –∑–Ω–∞–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã), —Å–ª–µ–¥—É—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –∏–∑ –∫–Ω–∏–≥–∏ "
            "–ú–∞–∫—Å–∏–º–∞ –ò–ª—å—è—Ö–æ–≤–∞ ¬´–ü–∏—à–∏, —Å–æ–∫—Ä–∞—â–∞–π¬ª . –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n\n"
            "–ö—Ä–∞—Ç–∫–∏–º –∏ —ë–º–∫–∏–º ‚Äî —É–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.\n"
            "–õ–µ–≥–∫–æ–¥–æ—Å—Ç—É–ø–Ω—ã–º ‚Äî –∏–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –≥–æ–≤–æ—Ä–∏ –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º.\n"
            "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º ‚Äî –¥–æ–±–∞–≤—å —ç–º–æ—Ü–∏–∏, —Ñ–∞–∫—Ç—ã –∏–ª–∏ –∏–Ω—Ç—Ä–∏–≥—É.\n"
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã, —Å–ø–∏—Å–∫–∏.\n"
            "–° –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é ‚Äî –ø–æ–¥—Ç–æ–ª–∫–Ω–∏ —á–∏—Ç–∞—Ç–µ–ª—è –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º, –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥—É –ø–æ —Å—Å—ã–ª–∫–µ.\n"
            "–ü—Ä–∏–º–µ—Ä —Ç–µ–º—ã: ¬´–ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä—É—Ç–∏–Ω—É? 3 –ª–∞–π—Ñ—Ö–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –≤–∞—à –¥–µ–Ω—å¬ª .\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ —É–ª–æ–∂–∏—Å—å –≤ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"–¢–µ–º–∞: {user_input}"
        )
        
        return await self.generate_text(prompt)
    
    async def generate_post_title(self, post_content: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        
        Args:
            post_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        """
        prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—É—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. –ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è "
            "Telegram-–ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ, —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º:\n\n"
            "–ö–æ—Ä–æ—Ç–∫–æ –∏ —ë–º–∫–æ ‚Äî –¥–æ 12 —Å–ª–æ–≤, —É–ø–æ—Ä –Ω–∞ –≥–ª–∞–≤–Ω—É—é –º—ã—Å–ª—å.\n"
            "–≠–º–æ—Ü–∏—è –∏ –∏–Ω—Ç—Ä–∏–≥–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –≤–æ–ø—Ä–æ—Å—ã, —Ü–∏—Ñ—Ä—ã, ¬´—Ñ–∏—à–∫–∏¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Å–µ–∫—Ä–µ—Ç—ã¬ª, ¬´–ª–∞–π—Ñ—Ö–∞–∫–∏¬ª).\n"
            "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ‚Äî —è–∑—ã–∫, –∫–∞–∫ —É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –¥—Ä—É–≥–æ–º (–Ω–∏–∫–∞–∫–æ–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π —Å—É—Ö–æ—Å—Ç–∏).\n"
            "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é ‚Äî –Ω–∞–º—ë–∫ –Ω–∞ –ø–æ–ª—å–∑—É (¬´—É—Å–ø–µ—Ç—å –±–æ–ª—å—à–µ¬ª, ¬´–∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫¬ª).\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä—É–∫—Ç—É—Ä:\n"
            "üî• ¬´–ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è: 3 –ª–∞–π—Ñ—Ö–∞–∫–∞ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è¬ª\n"
            "üí° ¬´–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã? –°–µ–∫—Ä–µ—Ç—ã –≥–∞–¥–∂–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —ç–∫–æ–Ω–æ–º—è—Ç 5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é¬ª\n\n"
            f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_content}"
        )
        
        return await self.generate_text(prompt)
    
    async def generate_post_tags(self, post_content: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞
        
        Args:
            post_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏
        """
        prompt = (
            "–¢—ã ‚Äî SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –º–∞—Å—Ç–µ—Ä –≤–∏—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–∑–¥–∞–π 7-10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö "
            "—Ñ—Ä–∞–∑ –¥–ª—è Telegram-–ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ, —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º:\n\n"
            "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ ‚Äî –≤—Å–µ —Ñ—Ä–∞–∑—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏ "
            "(–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –õ–∞–π—Ñ—Ö–∞–∫ –í—Ä–µ–º—è).\n"
            "–ö—Ä–∞—Ç–∫–æ—Å—Ç—å –∏ —ë–º–∫–æ—Å—Ç—å ‚Äî –¥–æ 3 —Å–ª–æ–≤ –≤ —Ñ—Ä–∞–∑–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–æ–≤–µ—Ç–î–Ω—è).\n"
            "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å ‚Äî –æ—Ç—Ä–∞–∂–∞–π –∫–ª—é—á–µ–≤—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞ (–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ª–∞–π—Ñ—Ö–∞–∫–∏, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Ç.–¥.).\n"
            "SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ –Ω–∏—à–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–ø—Ä–æ–≤–µ—Ä—å —Ç—Ä–µ–Ω–¥—ã –≤ TG).\n"
            "–ú–∏–∫—Å —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Äî –û—Å–Ω–æ–≤–Ω—ã–µ (–ø–æ —Ç–µ–º–µ): –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ (–ø–æ–¥—Ç–µ–º—ã): –¢–∞–π–º–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\n"
            "‚Äî –¢—Ä–µ–Ω–¥–æ–≤—ã–µ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ TG): –õ–∞–π—Ñ—Ö–∞–∫–∏\n"
            "‚Äî –ü—Ä–∏–∑—ã–≤–Ω—ã–µ (–¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è): –°–æ–≤–µ—Ç—É–π—Ç–µ–í–ö–æ–º–º–µ–Ω—Ç–∞—Ö\n"
            "–≠–º–æ–¥–∑–∏ ‚Äî –¥–æ–±–∞–≤—å –≤ 1-2 —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, üî•–ì–æ—Ä—è—á–∏–µ–°–æ–≤–µ—Ç—ã).\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
            "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å–ë–µ–∑–ì—Ä–∞–Ω–∏—Ü üí°–õ–∞–π—Ñ—Ö–∞–∫–ù–∞–î–µ–Ω—å –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ–õ–∞–π—Ç –í—Ä–µ–º—è–í–î–µ–ª–æ.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Ñ—Ä–∞–∑—ã –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, –¥–ª–∏–Ω—É (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤) –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ TG-–∞—É–¥–∏—Ç–æ—Ä–∏–∏\n\n"
            f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_content}"
        )
        
        return await self.generate_text(prompt) 