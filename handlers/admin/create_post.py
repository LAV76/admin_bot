import logging
from datetime import datetime
import re
from typing import Optional, Any

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.exceptions import TelegramBadRequest

from handlers.admin.post_states import PostStates
from app.services.post_service import PostService
from app.core.decorators import role_required
from app.core.config import settings
from app.core.utils import format_tags
from utils.logger import log_function_call
from utils.ai_service import AIService
from keyboards.admin.posts import (
    get_post_management_keyboard,
    get_post_creation_cancel_keyboard,
    get_chat_selection_keyboard,
    get_save_post_keyboard,
    get_skip_keyboard,
    get_ai_generation_keyboard,
)

router = Router()
logger = logging.getLogger(__name__)

def log_error(logger, message: str, error: Exception, exc_info: bool = False) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    error_message = f"{message}: {str(error)}"
    logger.error(error_message, exc_info=exc_info)

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@router.callback_query(F.data == "create_post")
@log_function_call
async def start_post_creation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
        
        try:
            await callback.message.edit_text(
                "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –ø–æ—Å—Ç–∞.",
                reply_markup=get_post_creation_cancel_keyboard(),
                parse_mode="HTML"
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.message.answer(
                "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –ø–æ—Å—Ç–∞.",
                reply_markup=get_post_creation_cancel_keyboard(),
                parse_mode="HTML"
            )
        
        await state.set_state(PostStates.title)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {PostStates.title} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer()
    
    except Exception as e:
        user_id = callback.from_user.id
        log_error(logger, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}", e, exc_info=True)
        
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@router.message(StateFilter(PostStates.title))
async def process_post_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        title = message.html_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: '{title}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not title or title.isspace():
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(title=title)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        await state.set_state(PostStates.content)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {PostStates.content} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>{title}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@router.message(StateFilter(PostStates.content))
async def process_post_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        content = message.html_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not content or content.isspace():
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
            await message.answer(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(content=content)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await state.set_state(PostStates.image)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {PostStates.image} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await message.answer(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\":",
            reply_markup=get_skip_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@router.message(StateFilter(PostStates.image))
async def process_post_image(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
        if not message.photo:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ")
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\":",
                reply_markup=get_skip_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            file_info = await bot.get_file(file_id)
            file_size = file_info.file_size
            
            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ú–ë, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if file_size and file_size > 5 * 1024 * 1024:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_size} –±–∞–π—Ç")
                await message.answer(
                    "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 5 –ú–ë.\n"
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(image=file_id)
        logger.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥—É —Ç–µ–≥–∞
        await state.set_state(PostStates.tag)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {PostStates.tag} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await message.answer(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\":",
            reply_markup=get_skip_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\":",
            reply_markup=get_skip_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–∞ –ø–æ—Å—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
@router.message(StateFilter(PostStates.tag))
async def process_post_tag(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–∞ –ø–æ—Å—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        tag = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–æ–≤
        if tag:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥–∏: —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            tag = ' '.join([t.strip().lower() for t in tag.split() if t.strip()])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            import re
            if re.search(r'[^\w\s]', tag):
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–≥–∏ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: '{tag}'")
                await message.answer(
                    "‚ùå –¢–µ–≥–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —Å–Ω–æ–≤–∞:"
                )
                return
        
        logger.info(f"–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{tag}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(tag=tag)
        logger.debug(f"–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            post_service = PostService()
            chats = await post_service.get_available_chats(bot)
            
            if not chats:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await message.answer(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=get_post_management_keyboard()
                )
                await state.clear()
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await state.set_state(PostStates.select_chat)
            logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {PostStates.select_chat} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            await message.answer(
                "‚úÖ –¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:",
                reply_markup=get_chat_selection_keyboard(chats)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–≥–æ–≤ –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\":",
            reply_markup=get_skip_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
@router.callback_query(F.data.startswith("select_chat_"), StateFilter(PostStates.select_chat))
async def process_chat_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        user_id = callback.from_user.id
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        chat_id_str = callback.data.split("_")[-1]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —á–∞—Ç —Å ID: {chat_id_str}")
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID —á–∞—Ç–∞ –≤ —á–∏—Å–ª–æ (0 –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞)
            chat_id = int(chat_id_str)
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            if chat_id == 0:
                chat_id = callback.message.chat.id
                chat_title = "–¢–µ–∫—É—â–∏–π —á–∞—Ç (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–µ–∫—É—â–∏–π —á–∞—Ç (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º) —Å ID: {chat_id}")
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ
                try:
                    chat = await bot.get_chat(chat_id)
                    chat_title = chat.title or f"–ß–∞—Ç {chat_id}"
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ {chat_id}: {chat_title}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
                    chat_title = f"–ß–∞—Ç {chat_id}"
                    logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ
            await state.update_data(target_chat_id=chat_id, target_chat_title=chat_title)
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ: ID={chat_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{chat_title}'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
            try:
                await callback.answer(f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_title}")
            except TelegramBadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞: {e}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            await finish_post_creation(callback.message, state, bot)
            
        except ValueError as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞: {chat_id_str}: {e}")
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_post_management_keyboard()
            )
            await state.clear()
    
    except Exception as e:
        user_id = callback.from_user.id
        log_error(logger, f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}", e, exc_info=True)
        
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
@router.callback_query(F.data == "skip_chat_selection", StateFilter(PostStates.select_chat))
async def skip_chat_selection(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from app.core.config import settings
        if settings.channel_id_as_int is not None:
            channel_id = settings.channel_id_as_int
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            try:
                chat = await bot.get_chat(channel_id)
                chat_title = chat.title or f"–ö–∞–Ω–∞–ª {channel_id}"
            except Exception as e:
                log_error(logger, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {channel_id}", e)
                chat_title = f"–ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ({channel_id})"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ
            await state.update_data(target_chat_id=channel_id, target_chat_title=chat_title)
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ID={channel_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{chat_title}'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
            try:
                await callback.answer(f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {chat_title}")
            except TelegramBadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞: {e}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            await finish_post_creation(callback.message, state, bot)
            
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä —á–∞—Ç–∞, –Ω–æ –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            post_service = PostService()
            chats = await post_service.get_available_chats(bot)
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç
            try:
                await callback.answer("–ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                await callback.message.edit_text(
                    "‚ùó <b>–í—ã–±–æ—Ä —á–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω</b> –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤:",
                    reply_markup=get_chat_selection_keyboard(chats, show_skip_button=False),
                    parse_mode="HTML"
                )
            except TelegramBadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await callback.message.answer(
                    "‚ùó <b>–í—ã–±–æ—Ä —á–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω</b> –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤:",
                    reply_markup=get_chat_selection_keyboard(chats, show_skip_button=False),
                    parse_mode="HTML"
                )
    
    except Exception as e:
        user_id = callback.from_user.id
        log_error(logger, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}", e, exc_info=True)
        
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
async def finish_post_creation(message, state: FSMContext, bot: Bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        title = data.get("title", "")
        content = data.get("content", "")
        image = data.get("image", "")
        tag = data.get("tag", "")
        target_chat_id = data.get("target_chat_id")
        target_chat_title = data.get("target_chat_title")
        
        user_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: '{title}'")
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞: title='{title}', content_length={len(content)}, image={bool(image)}, tag='{tag}', target_chat={target_chat_title} ({target_chat_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if target_chat_id is None:
            logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                post_service = PostService()
                chats = await post_service.get_available_chats(bot)
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(chats)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
                
                await message.edit_text(
                    "‚ùó <b>–í—ã–±–æ—Ä —á–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω</b> –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤:",
                    reply_markup=get_chat_selection_keyboard(chats, show_skip_button=False),
                    parse_mode="HTML"
                )
            except TelegramBadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await message.answer(
                    "‚ùó <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞</b>: –Ω–µ –≤—ã–±—Ä–∞–Ω —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç.",
                    reply_markup=get_post_management_keyboard(),
                    parse_mode="HTML"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            await state.set_state(PostStates.select_chat)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        post_service = PostService()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞
        try:
            creation_message = await message.edit_text(
                "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...",
                parse_mode="HTML"
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            creation_message = await message.answer(
                "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...",
                parse_mode="HTML"
            )
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        logger.debug(f"–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ create_post —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: title='{title}', content_length={len(content)}, image={bool(image)}, tag='{tag}', user_id={user_id}, target_chat_id={target_chat_id}, target_chat_title='{target_chat_title}'")
        post_data = await post_service.create_post(
            title=title,
            content=content,
            image=image,
            tag=tag,
            user_id=user_id,
            target_chat_id=target_chat_id,
            target_chat_title=target_chat_title
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not post_data:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: post_data is None")
            await creation_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
            return
        
        logger.info(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, ID –ø–æ—Å—Ç–∞: {post_data.get('id')}")
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {post_data}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        tags = tag.split()
        formatted_tags = ' '.join([f"#{tag}" for tag in tags])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        chat_info = ""
        if target_chat_id and target_chat_title:
            chat_info = f"<i>–ß–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</i> {target_chat_title}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –ø–æ—Å—Ç–∞
        try:
            if image:
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=image,
                    caption=(
                        f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                        f"<b>{title}</b>\n\n"
                        f"{content}\n\n"
                        f"<i>{formatted_tags}</i>\n"
                        f"{chat_info}"
                    ),
                    reply_markup=get_post_management_keyboard(),
                    parse_mode="HTML"
                )
            else:
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await creation_message.edit_text(
                    text=(
                        f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                        f"<b>{title}</b>\n\n"
                        f"{content}\n\n"
                        f"<i>{formatted_tags}</i>\n"
                        f"{chat_info}"
                    ),
                    reply_markup=get_post_management_keyboard(),
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            await creation_message.edit_text(
                "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=get_post_management_keyboard()
            )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}", exc_info=True)
        
        try:
            await message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
        except Exception as edit_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_management_keyboard()
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await state.clear()

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@router.callback_query(F.data == "cancel_post_creation")
async def cancel_post_creation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        user_id = callback.from_user.id
        current_state = await state.get_state()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–º–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
        
        if current_state in [s.state for s in PostStates.__states__]:
            await state.clear()
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                await callback.message.edit_text(
                    "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                    reply_markup=get_post_management_keyboard()
                )
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except TelegramBadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.message.answer(
                    "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                    reply_markup=get_post_management_keyboard()
                )
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç")
            
            try:
                await callback.message.edit_text(
                    "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.",
                    reply_markup=get_post_management_keyboard()
                )
            except TelegramBadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.message.answer(
                    "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.",
                    reply_markup=get_post_management_keyboard()
                )
        
        await callback.answer()
        
    except Exception as e:
        user_id = callback.from_user.id
        log_error(logger, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}", e, exc_info=True)
        
        try:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.",
                reply_markup=get_post_management_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.",
                reply_markup=get_post_management_keyboard()
            )
        
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(F.data == "skip")
async def skip_current_step(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        user_id = callback.from_user.id
        current_state = await state.get_state()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥ {current_state}")
        
        if current_state == PostStates.image.state:
            # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await state.update_data(image="")
            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —ç—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥—É —Ç–µ–≥–∞
            await state.set_state(PostStates.tag)
            
            await callback.message.edit_text(
                "‚úÖ –≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\":",
                reply_markup=get_skip_keyboard()
            )
            
        elif current_state == PostStates.tag.state:
            # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ —Ç–µ–≥–æ–≤
            await state.update_data(tag="")
            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —ç—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            post_service = PostService()
            chats = await post_service.get_available_chats(bot)
            
            if not chats:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await callback.message.edit_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=get_post_management_keyboard()
                )
                await state.clear()
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await state.set_state(PostStates.select_chat)
            
            await callback.message.edit_text(
                "‚úÖ –≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:",
                reply_markup=get_chat_selection_keyboard(chats)
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —à–∞–≥–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —à–∞–≥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI"
@router.callback_query(F.data == "generate_post_ai")
@log_function_call
async def start_ai_generation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI")
        
        await callback.message.edit_text(
            "ü§ñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∏–¥–µ—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ö–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–º\n"
            "‚Ä¢ 5 —Å–ø–æ—Å–æ–±–æ–≤ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏\n"
            "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –º–æ–∑–≥–æ–º –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞",
            reply_markup=get_post_creation_cancel_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(PostStates.ai_prompt)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {PostStates.ai_prompt} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer()
        
    except Exception as e:
        user_id = callback.from_user.id
        log_error(logger, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}", e, exc_info=True)
        
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_creation_cancel_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_creation_cancel_keyboard()
            )
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
@router.message(StateFilter(PostStates.ai_prompt))
async def process_ai_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI"""
    try:
        user_id = message.from_user.id
        prompt = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if not prompt or prompt.isspace():
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ–º—Ç –¥–ª—è AI")
            await message.answer(
                "‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:"
            )
            return
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: '{prompt}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(ai_prompt=prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await message.answer(
            "‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await state.set_state(PostStates.ai_generating)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ AI
        ai_service = AIService()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        generated_content = await ai_service.generate_post_content(prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        generated_title = await ai_service.generate_post_title(generated_content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
        generated_tags = await ai_service.generate_post_tags(generated_content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            ai_generated_content=generated_content,
            ai_generated_title=generated_title,
            ai_generated_tags=generated_tags
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result_message = (
            f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n{generated_title}\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b>\n{generated_content}\n\n"
            f"<b>–•–µ—à—Ç–µ–≥–∏:</b>\n{generated_tags}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(
            result_message,
            reply_markup=get_ai_generation_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI: {e}", exc_info=True)
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_post_creation_cancel_keyboard(),
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@router.callback_query(F.data == "use_ai_content")
async def use_ai_content(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –∫–æ–Ω—Ç–µ–Ω—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        generated_title = data.get("ai_generated_title", "")
        generated_content = data.get("ai_generated_content", "")
        generated_tags = data.get("ai_generated_tags", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(
            title=generated_title,
            content=generated_content,
            tag=generated_tags
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await state.set_state(PostStates.image)
        
        await callback.message.edit_text(
            "‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\":",
            reply_markup=get_skip_keyboard(),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        log_error(logger, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}", exc_info=True)
        
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_post_creation_cancel_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_post_creation_cancel_keyboard()
            )
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@router.callback_query(F.data == "regenerate_ai")
async def regenerate_ai_content(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI"""
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º—Ç
        data = await state.get_data()
        original_prompt = data.get("ai_prompt", "")
        
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await callback.message.edit_text(
            "‚è≥ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML"
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ AI
        ai_service = AIService()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        generated_content = await ai_service.generate_post_content(original_prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        generated_title = await ai_service.generate_post_title(generated_content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
        generated_tags = await ai_service.generate_post_tags(generated_content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            ai_generated_content=generated_content,
            ai_generated_title=generated_title,
            ai_generated_tags=generated_tags
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result_message = (
            f"‚úÖ <b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n{generated_title}\n\n"
            f"<b>–¢–µ–∫—Å—Ç:</b>\n{generated_content}\n\n"
            f"<b>–•–µ—à—Ç–µ–≥–∏:</b>\n{generated_tags}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(
            result_message,
            reply_markup=get_ai_generation_keyboard(),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        log_error(logger, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}", exc_info=True)
        
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_creation_cancel_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_post_creation_cancel_keyboard()
            )
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI
@router.callback_query(F.data == "cancel_ai_generation")
async def cancel_ai_generation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É"""
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        await state.set_state(PostStates.title)
        
        await callback.message.edit_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –ø–æ—Å—Ç–∞.",
            reply_markup=get_post_creation_cancel_keyboard(),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        log_error(logger, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}", exc_info=True)
        
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_post_creation_cancel_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_post_creation_cancel_keyboard()
            )
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 