from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest

import logging
import re
from typing import Dict, List, Tuple, Optional, Any

from app.services.role_service import RoleService
from app.services.user_service import UserService
from app.core.decorators import role_required
from app.db.session import get_session
from app.db.repositories.role_repository import RoleRepository
from app.db.repositories.user_repository import UserRepository
from app.core.logging import setup_logger
from keyboards.admin.roles import (
    get_role_selection_keyboard,
    get_back_to_role_selection_keyboard
)
from keyboards.admin.menu import get_admin_menu_keyboard

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏
from db_handlers.user_role.manage_roles import (
    get_user_roles,
    add_user_role,
    remove_user_role,
    check_user_role
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from .states import AdminStates, ContentManagerStates, RemoveRoleStates, RoleStates

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger("roles_handler")

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RoleStates(StatesGroup):
    waiting_for_user_id_add = State()
    waiting_for_role_add = State()
    waiting_for_user_id_remove = State()
    waiting_for_role_remove = State()
    waiting_for_confirm_remove = State()

role_service = RoleService()

async def validate_user_id(bot: Bot, user_id: str) -> tuple[bool, str, dict]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –ø–æ ID
    
    Args:
        bot: –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        tuple[bool, str, dict]: (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç_–ª–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–Ω–Ω—ã–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID - —ç—Ç–æ —á–∏—Å–ª–æ
        user_id_int = int(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        if user_id_int <= 0:
            return False, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", {}
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            user = await bot.get_chat(user_id_int)
            user_data = {
                "id": user.id,
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "display_name": user.full_name
            }
            return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.full_name}", user_data
        except TelegramBadRequest as e:
            if "chat not found" in str(e).lower():
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram. –í–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID.", {}
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", {}
    except ValueError:
        return False, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", {}

@router.callback_query(F.data == "make_user_role")
@role_required("admin")
async def process_role_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            "–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
            reply_markup=get_role_selection_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )

@router.callback_query(F.data == "take_user_role_admin")
@role_required("admin")
async def process_admin_role(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        await callback.message.edit_text(
            "üë§ –†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã:",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(AdminStates.waiting_for_user_id)
        await state.update_data(role_type="admin")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )

@router.callback_query(F.data == "take_user_role_content_manager")
@role_required("admin")
async def process_content_manager_role(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        await callback.message.edit_text(
            "üë§ –†–æ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã:",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ContentManagerStates.waiting_for_user_id)
        await state.update_data(role_type="content_manager")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )

@router.message(AdminStates.waiting_for_user_id)
@router.message(ContentManagerStates.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID
        is_valid, error_message, user_data = await validate_user_id(bot, user_id)
        if not is_valid:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã:",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        data = await state.get_data()
        role_type = data.get("role_type")
        display_name = user_data.get("display_name", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–æ–ª—å
        if await role_service.check_user_role(int(user_id), role_type):
            await message.answer(
                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å {role_type}",
                reply_markup=get_back_to_menu_keyboard()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.update_data(user_id=user_id, display_name=display_name, user_data=user_data)
        await state.set_state(AdminStates.waiting_for_notes if role_type == "admin" else ContentManagerStates.waiting_for_notes)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_roles = await role_service.get_user_roles(int(user_id))
        roles_text = "\n‚Ä¢ ".join(current_roles) if current_roles else "–Ω–µ—Ç"
        
        await message.answer(
            f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {display_name}\n"
            f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:\n‚Ä¢ {roles_text}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Ä–æ–ª–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
            reply_markup=get_back_to_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()

@router.message(AdminStates.waiting_for_notes)
@router.message(ContentManagerStates.waiting_for_notes)
async def process_notes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ä–æ–ª–∏"""
    try:
        notes = message.text.strip()
        if notes == "-":
            notes = None
        
        data = await state.get_data()
        user_id = data.get("user_id")
        role_type = data.get("role_type")
        display_name = data.get("display_name", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.update_data(notes=notes)
        await state.set_state(AdminStates.confirm_role if role_type == "admin" else ContentManagerStates.confirm_role)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        notes_text = f"\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {notes}" if notes else ""
        
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"–ò–º—è: {display_name}\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å {role_type}{notes_text}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            reply_markup=get_confirm_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "confirm_action", AdminStates.confirm_role)
@router.callback_query(F.data == "confirm_action", ContentManagerStates.confirm_role)
async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        data = await state.get_data()
        user_id = int(data.get("user_id"))
        role_type = data.get("role_type")
        display_name = data.get("display_name", "")
        notes = data.get("notes")
        admin_id = callback.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        success = await role_service.add_role(
            user_id=user_id,
            role_type=role_type,
            admin_id=admin_id,
            display_name=display_name,
            notes=notes
        )
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
            current_roles = await role_service.get_user_roles(user_id)
            roles_text = "\n‚Ä¢ ".join(current_roles) if current_roles else "–Ω–µ—Ç"
            
            await callback.message.edit_text(
                f"‚úÖ –†–æ–ª—å {role_type} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n"
                f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n‚Ä¢ {roles_text}",
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å",
                reply_markup=get_back_to_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "remove_user_role")
@role_required("admin")
async def process_remove_role_start(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
    try:
        await callback.message.edit_text(
            "üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å:",
            reply_markup=get_back_to_role_selection_keyboard()
        )
        await state.set_state(RemoveRoleStates.waiting_for_user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_role_selection_keyboard()
        )

@router.message(RemoveRoleStates.waiting_for_user_id)
async def process_remove_role_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        user_id = message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {user_id} (—Ç–∏–ø: {type(user_id)})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
        is_valid, error_message, user_data = await validate_user_id(bot, user_id)
        if not is_valid:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã:",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        user_id_int = int(user_id)
        display_name = user_data.get("display_name", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        roles = await role_service.get_user_roles(user_id_int)
        
        if not roles:
            await message.answer(
                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}, –ò–º—è: {display_name}) –Ω–µ—Ç —Ä–æ–ª–µ–π",
                reply_markup=get_back_to_role_selection_keyboard()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = []
        for role in roles:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå {role}", 
                    callback_data=f"remove_role_{user_id}_{role}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                callback_data="back_to_role_selection"
            )
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(user_id=user_id, display_name=display_name)
        await state.set_state(RemoveRoleStates.select_role)
        
        await message.answer(
            f"üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {display_name}\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:\n‚Ä¢ " + "\n‚Ä¢ ".join(roles),
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_role_selection_keyboard()
        )
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("remove_role_"))
async def process_remove_role_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = callback.data.split("_")
        user_id = int(parts[2])
        role_type = parts[3]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        display_name = data.get("display_name", "")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        await state.update_data(user_id=user_id, role_type=role_type)
        await state.set_state(RemoveRoleStates.waiting_for_notes)
        
        await callback.message.edit_text(
            f"üìù –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_type} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {display_name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
            reply_markup=get_back_to_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()

@router.message(RemoveRoleStates.waiting_for_notes)
async def process_remove_role_notes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ä–æ–ª–∏"""
    try:
        notes = message.text.strip()
        if notes == "-":
            notes = None
        
        data = await state.get_data()
        user_id = data.get("user_id")
        role_type = data.get("role_type")
        display_name = data.get("display_name", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.update_data(notes=notes)
        await state.set_state(RemoveRoleStates.confirm_action)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        notes_text = f"\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {notes}" if notes else ""
        
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏:\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"–ò–º—è: {display_name}\n"
            f"–†–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {role_type}{notes_text}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            reply_markup=get_confirm_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "confirm_action", RemoveRoleStates.confirm_action)
async def process_remove_role_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
    try:
        data = await state.get_data()
        user_id = int(data.get("user_id"))
        role_type = data.get("role_type")
        admin_id = callback.from_user.id
        
        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å
        success = await role_service.remove_role(
            user_id=user_id,
            role_type=role_type,
            admin_id=admin_id
        )
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
            current_roles = await role_service.get_user_roles(user_id)
            roles_text = "\n‚Ä¢ ".join(current_roles) if current_roles else "–Ω–µ—Ç"
            
            await callback.message.edit_text(
                f"‚úÖ –†–æ–ª—å {role_type} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n‚Ä¢ {roles_text}",
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å",
                reply_markup=get_back_to_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_action")
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        await callback.message.edit_text(
            "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_back_to_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "back_to_menu")
async def process_back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_admin_menu_keyboard()
        )

@router.callback_query(F.data == "role_history")
@role_required("admin")
async def process_role_history(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π
        history = await role_service.get_role_history(limit=10)
        
        if not history:
            await callback.message.edit_text(
                "üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π –ø—É—Å—Ç–∞",
                reply_markup=get_back_to_role_selection_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        history_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π:</b>\n\n"
        
        for entry in history:
            action_emoji = "‚ûï" if entry["action"] == "add" else "‚ûñ"
            action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–∞" if entry["action"] == "add" else "—É–¥–∞–ª–µ–Ω–∞"
            
            notes_text = f"\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {entry['notes']}</i>" if entry.get("notes") else ""
            
            history_text += (
                f"{action_emoji} –†–æ–ª—å <b>{entry['role_type']}</b> {action_text} "
                f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{entry['user_id']}</code>\n"
                f"‚è± {entry['performed_at']}\n"
                f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: <code>{entry['performed_by']}</code>{notes_text}\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        await callback.message.edit_text(
            history_text,
            reply_markup=get_back_to_role_selection_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–ª–µ–π: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–ª–µ–π.",
            reply_markup=get_back_to_role_selection_keyboard()
        )

@router.callback_query(F.data == "list_roles")
@role_required("admin")
async def process_list_roles(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
        roles = ["admin", "content_manager"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        text = "üìã <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏:</b>\n\n"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ä–æ–ª—å
        for role_type in roles:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
            users = await role_service.get_by_role(role_type)
            
            if users:
                text += f"<b>üìå {role_type}:</b>\n"
                for user in users:
                    text += f"‚Ä¢ ID: <code>{user.user_id}</code>"
                    if user.username:
                        text += f", –ò–º—è: {user.username}"
                    text += "\n"
                text += "\n"
        
        if text == "üìã <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏:</b>\n\n":
            text += "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏"
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_role_selection_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏.",
            reply_markup=get_back_to_role_selection_keyboard()
        )

@router.callback_query(F.data == "manage_roles")
@role_required("admin")
async def process_manage_roles(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=get_role_selection_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_admin_menu_keyboard()
        )

@router.callback_query(F.data == "add_user_role")
async def process_add_user_role(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 123456789 (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n"
        "‚Ä¢ @username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
        reply_markup=get_back_to_role_selection_keyboard()
    )
    await state.set_state(RoleStates.waiting_for_user_id_add)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏")

@router.message(RoleStates.waiting_for_user_id_add)
async def process_add_role_user_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
    user_input = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {user_input}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ @username –∏–ª–∏ ID
    if user_input.startswith('@') or (not user_input.isdigit() and not user_input.startswith('-')):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ @username
        username = user_input.lstrip('@')  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º username: {username}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_service = UserService()
        user = await user_service.get_user_by_username(username)
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_id = str(user.user_id)
            display_name = user.full_name or f"@{username}"
            
            logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ username @{username}: {display_name} (ID: {user_id})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            user_data = {
                "id": user_id,
                "display_name": display_name,
                "username": username
            }
            await state.update_data(user_id=user_id, display_name=display_name, user_data=user_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–æ–ª—å
            has_admin_role = await check_user_role(user_id, "admin")
            has_content_manager_role = await check_user_role(user_id, "content_manager")
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            roles = []
            if not has_admin_role:
                roles.append({"id": "admin", "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"})
            if not has_content_manager_role:
                roles.append({"id": "content_manager", "name": "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"})
                
            if not roles:
                await message.answer(
                    f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{display_name}</b> (ID: {user_id}) —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏.\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
                    reply_markup=get_back_to_role_selection_keyboard(),
                    parse_mode="HTML"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=role["name"], callback_data=f"add_role_{role['id']}_{user_id}")]
                for role in roles
            ] + [
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_role_selection")]
            ])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{display_name}</b> (ID: {user_id}):",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram API
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram API
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —á–µ—Ä–µ–∑ get_chat")
                try:
                    # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ get_chat
                    chat = await bot.get_chat(f"@{username}")
                    user_id = str(chat.id)
                    display_name = chat.full_name or f"@{username}"
                    
                    logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ Telegram API –ø–æ username @{username}: {display_name} (ID: {user_id})")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    user_data = {
                        "id": user_id,
                        "display_name": display_name,
                        "username": username
                    }
                    await state.update_data(user_id=user_id, display_name=display_name, user_data=user_data)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ.")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    user_service = UserService()
                    created = await user_service.create_user(
                        int(user_id), 
                        username=username, 
                        full_name=display_name
                    )
                    
                    if not created:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        await message.answer(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            reply_markup=get_back_to_role_selection_keyboard()
                        )
                        await state.clear()
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    has_admin_role = await check_user_role(user_id, "admin")
                    has_content_manager_role = await check_user_role(user_id, "content_manager")
                    
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    roles = []
                    if not has_admin_role:
                        roles.append({"id": "admin", "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"})
                    if not has_content_manager_role:
                        roles.append({"id": "content_manager", "name": "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"})
                        
                    if not roles:
                        await message.answer(
                            f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{display_name}</b> (ID: {user_id}) —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏.\n\n"
                            f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
                            reply_markup=get_back_to_role_selection_keyboard(),
                            parse_mode="HTML"
                        )
                        return
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=role["name"], callback_data=f"add_role_{role['id']}_{user_id}")]
                        for role in roles
                    ] + [
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_role_selection")]
                    ])
                    
                    await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{display_name}</b> (ID: {user_id}):",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                except Exception as chat_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —á–µ—Ä–µ–∑ get_chat: {chat_error}")
                    
                    await message.answer(
                        f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º @{username}</b>\n\n"
                        f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º\n"
                        f"‚Ä¢ –£ –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏\n\n"
                        f"<b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
                        f"1Ô∏è‚É£ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</b> (–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É Start)\n"
                        f"2Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏\n"
                        f"3Ô∏è‚É£ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ @username\n\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
                        reply_markup=get_back_to_role_selection_keyboard(),
                        parse_mode="HTML"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username @{username}: {e}", exc_info=True)
                
                await message.answer(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º @{username}.\n\n"
                    f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º —Ä–∞–Ω–µ–µ.\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username:",
                    reply_markup=get_back_to_role_selection_keyboard(),
                    parse_mode="HTML"
                )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user_input
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        exists, validation_message, user_data = await validate_user_id(bot, user_id)
        
        if not exists:
            await message.answer(
                f"‚ùå {validation_message}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username:",
                reply_markup=get_back_to_role_selection_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(user_id=user_id, display_name=user_data.get("display_name", ""), user_data=user_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_exists = await check_user_exists(user_id)
        
        if not user_exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ.")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_service = UserService()
            created = await user_service.create_user(
                int(user_id), 
                username=user_data.get("username"), 
                full_name=user_data.get("display_name")
            )
            
            if not created:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_back_to_role_selection_keyboard()
                )
                await state.clear()
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_admin_role = await check_user_role(user_id, "admin")
        has_content_manager_role = await check_user_role(user_id, "content_manager")
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        roles = []
        if not has_admin_role:
            roles.append({"id": "admin", "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"})
        if not has_content_manager_role:
            roles.append({"id": "content_manager", "name": "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"})
            
        if not roles:
            await message.answer(
                f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_data.get('display_name', f'ID: {user_id}')}</b> —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏.\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
                reply_markup=get_back_to_role_selection_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=role["name"], callback_data=f"add_role_{role['id']}_{user_id}")]
            for role in roles
        ] + [
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_role_selection")]
        ])
        
        display_name = user_data.get("display_name", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{display_name}</b> (ID: {user_id}):",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

@router.callback_query(F.data == "back_to_role_selection")
async def process_back_to_role_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–æ–ª—è–º–∏"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–æ–ª—è–º–∏
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=get_role_selection_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–æ–ª—è–º–∏")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–µ–π: {e}", exc_info=True)
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
                reply_markup=get_role_selection_keyboard()
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
            await callback.answer()
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é: {send_error}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("add_role_"))
async def process_add_role_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "add_role_ROLE_TYPE_USER_ID"
        callback_data = callback.data
        
        # –û—Ç–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "add_role_" –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
        _, _, rest = callback_data.partition("add_role_")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–æ–ª–∏ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_underscore_index = rest.rfind("_")
        if last_underscore_index == -1:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–∏–ø —Ä–æ–ª–∏ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role_type = rest[:last_underscore_index]
        user_id = int(rest[last_underscore_index + 1:])
        
        admin_id = callback.from_user.id
        
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å {role_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–æ–ª—å
        has_role = await check_user_role(user_id, role_type)
        if has_role:
            await callback.message.edit_text(
                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å {role_type}",
                reply_markup=get_back_to_role_selection_keyboard()
            )
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å
        success = await add_user_role(user_id, role_type, admin_id)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
            current_roles = await get_user_roles(user_id)
            roles_text = "\n‚Ä¢ ".join(current_roles) if current_roles else "–Ω–µ—Ç"
            
            await callback.message.edit_text(
                f"‚úÖ –†–æ–ª—å {role_type} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}\n"
                f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n‚Ä¢ {roles_text}",
                reply_markup=get_back_to_role_selection_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=get_back_to_role_selection_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}", exc_info=True)
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_back_to_role_selection_keyboard()
        )
    finally:
        await state.clear()

async def check_user_exists(user_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ int, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        if isinstance(user_id, str):
            user_id = int(user_id)
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UserService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_service = UserService()
        user = await user_service.get_user_by_id(user_id)
        
        if user:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return True
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {e}", exc_info=True)
        return False 